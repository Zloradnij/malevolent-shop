<?php

namespace app\modules\catalog\models\query;

use app\modules\catalog\models\Category;
use app\modules\catalog\models\Product;
use app\modules\catalog\models\Product2category;
use app\modules\catalog\models\ProductVariant;

/**
 * This is the ActiveQuery class for [[\app\modules\catalog\models\ProductVariant]].
 *
 * @see \app\modules\catalog\models\ProductVariant
 */
class ProductVariantQuery extends BaseCatalogQuery
{
    protected static $currentTableName;

    public function init()
    {
        static::$currentTableName = ProductVariant::tableName();

        parent::init(); // TODO: Change the autogenerated stub
    }

    /**
     * @return $this
     */
    public function active()
    {
        return $this->andWhere([static::$currentTableName . ".status" => ProductVariant::STATUS_ACTIVE]);
    }

    /**
     * @param $productID
     *
     * @return $this
     */
    public function findByProduct($productID)
    {
        return $this->andWhere([static::$currentTableName . '.product_id' => $productID]);
    }

    /**
     * @param string $categoryID
     *
     * @return $this
     */
    public function findByCategory($categoryID)
    {
        $productTableName = Product::tableName();
        $categoryTableName = Category::tableName();
        $product2categoryTableName = Product2category::tableName();

        return $this
            ->indexBy('id')
            ->innerJoin($productTableName, "product_id = $productTableName.id")
            ->innerJoin($product2categoryTableName, "$product2categoryTableName.product_id = $productTableName.id")
            ->innerJoin($categoryTableName, "$product2categoryTableName.category_id = $categoryTableName.id")
            ->andWhere(["`$categoryTableName`.`id`" => $categoryID]);
    }

    /**
     * @return $this
     */
    public function withPrice()
    {
        return $this->andWhere(['>', static::$currentTableName . '.price', 0]);
    }

    /**
     * @param int $id
     *
     * @return $this
     */
    public function byID($id)
    {
        return $this->andWhere(['id' => (int)$id]);
    }
}
